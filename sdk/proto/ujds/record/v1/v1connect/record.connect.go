// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ujds/record/v1/record.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ashep/ujds/sdk/proto/ujds/record/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecordServiceName is the fully-qualified name of the RecordService service.
	RecordServiceName = "ujds.record.v1.RecordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecordServicePushProcedure is the fully-qualified name of the RecordService's Push RPC.
	RecordServicePushProcedure = "/ujds.record.v1.RecordService/Push"
	// RecordServiceGetProcedure is the fully-qualified name of the RecordService's Get RPC.
	RecordServiceGetProcedure = "/ujds.record.v1.RecordService/Get"
	// RecordServiceFindProcedure is the fully-qualified name of the RecordService's Find RPC.
	RecordServiceFindProcedure = "/ujds.record.v1.RecordService/Find"
	// RecordServiceHistoryProcedure is the fully-qualified name of the RecordService's History RPC.
	RecordServiceHistoryProcedure = "/ujds.record.v1.RecordService/History"
)

// RecordServiceClient is a client for the ujds.record.v1.RecordService service.
type RecordServiceClient interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	History(context.Context, *connect.Request[v1.HistoryRequest]) (*connect.Response[v1.HistoryResponse], error)
}

// NewRecordServiceClient constructs a client for the ujds.record.v1.RecordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	recordServiceMethods := v1.File_ujds_record_v1_record_proto.Services().ByName("RecordService").Methods()
	return &recordServiceClient{
		push: connect.NewClient[v1.PushRequest, v1.PushResponse](
			httpClient,
			baseURL+RecordServicePushProcedure,
			connect.WithSchema(recordServiceMethods.ByName("Push")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+RecordServiceGetProcedure,
			connect.WithSchema(recordServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v1.FindRequest, v1.FindResponse](
			httpClient,
			baseURL+RecordServiceFindProcedure,
			connect.WithSchema(recordServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
		history: connect.NewClient[v1.HistoryRequest, v1.HistoryResponse](
			httpClient,
			baseURL+RecordServiceHistoryProcedure,
			connect.WithSchema(recordServiceMethods.ByName("History")),
			connect.WithClientOptions(opts...),
		),
	}
}

// recordServiceClient implements RecordServiceClient.
type recordServiceClient struct {
	push    *connect.Client[v1.PushRequest, v1.PushResponse]
	get     *connect.Client[v1.GetRequest, v1.GetResponse]
	find    *connect.Client[v1.FindRequest, v1.FindResponse]
	history *connect.Client[v1.HistoryRequest, v1.HistoryResponse]
}

// Push calls ujds.record.v1.RecordService.Push.
func (c *recordServiceClient) Push(ctx context.Context, req *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return c.push.CallUnary(ctx, req)
}

// Get calls ujds.record.v1.RecordService.Get.
func (c *recordServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Find calls ujds.record.v1.RecordService.Find.
func (c *recordServiceClient) Find(ctx context.Context, req *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// History calls ujds.record.v1.RecordService.History.
func (c *recordServiceClient) History(ctx context.Context, req *connect.Request[v1.HistoryRequest]) (*connect.Response[v1.HistoryResponse], error) {
	return c.history.CallUnary(ctx, req)
}

// RecordServiceHandler is an implementation of the ujds.record.v1.RecordService service.
type RecordServiceHandler interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error)
	History(context.Context, *connect.Request[v1.HistoryRequest]) (*connect.Response[v1.HistoryResponse], error)
}

// NewRecordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecordServiceHandler(svc RecordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recordServiceMethods := v1.File_ujds_record_v1_record_proto.Services().ByName("RecordService").Methods()
	recordServicePushHandler := connect.NewUnaryHandler(
		RecordServicePushProcedure,
		svc.Push,
		connect.WithSchema(recordServiceMethods.ByName("Push")),
		connect.WithHandlerOptions(opts...),
	)
	recordServiceGetHandler := connect.NewUnaryHandler(
		RecordServiceGetProcedure,
		svc.Get,
		connect.WithSchema(recordServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	recordServiceFindHandler := connect.NewUnaryHandler(
		RecordServiceFindProcedure,
		svc.Find,
		connect.WithSchema(recordServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	recordServiceHistoryHandler := connect.NewUnaryHandler(
		RecordServiceHistoryProcedure,
		svc.History,
		connect.WithSchema(recordServiceMethods.ByName("History")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ujds.record.v1.RecordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecordServicePushProcedure:
			recordServicePushHandler.ServeHTTP(w, r)
		case RecordServiceGetProcedure:
			recordServiceGetHandler.ServeHTTP(w, r)
		case RecordServiceFindProcedure:
			recordServiceFindHandler.ServeHTTP(w, r)
		case RecordServiceHistoryProcedure:
			recordServiceHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecordServiceHandler struct{}

func (UnimplementedRecordServiceHandler) Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ujds.record.v1.RecordService.Push is not implemented"))
}

func (UnimplementedRecordServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ujds.record.v1.RecordService.Get is not implemented"))
}

func (UnimplementedRecordServiceHandler) Find(context.Context, *connect.Request[v1.FindRequest]) (*connect.Response[v1.FindResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ujds.record.v1.RecordService.Find is not implemented"))
}

func (UnimplementedRecordServiceHandler) History(context.Context, *connect.Request[v1.HistoryRequest]) (*connect.Response[v1.HistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ujds.record.v1.RecordService.History is not implemented"))
}
